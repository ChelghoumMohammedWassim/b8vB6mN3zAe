// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using b8vB6mN3zAe.Database;

#nullable disable

namespace b8vB6mN3zAe.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20240403144528_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("b8vB6mN3zAe.Models.Enums.City", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SectorID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("SectorID");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.Lab", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CityID")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.ToTable("Lab");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.Sector", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LabID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("LabID");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.User", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("City")
                        .HasColumnType("integer");

                    b.Property<int?>("CityID")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.UserSector", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SectorID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("SectorID");

                    b.HasIndex("UserID");

                    b.ToTable("UserSector");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.ZipCode", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<int>("CityID")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.ToTable("ZipCode");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.Enums.City", b =>
                {
                    b.HasOne("b8vB6mN3zAe.Models.Sector", "Sector")
                        .WithMany("Cities")
                        .HasForeignKey("SectorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.Lab", b =>
                {
                    b.HasOne("b8vB6mN3zAe.Models.Enums.City", "City")
                        .WithMany()
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.Sector", b =>
                {
                    b.HasOne("b8vB6mN3zAe.Models.Lab", "Lab")
                        .WithMany("Sectors")
                        .HasForeignKey("LabID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lab");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.User", b =>
                {
                    b.HasOne("b8vB6mN3zAe.Models.Enums.City", null)
                        .WithMany("Users")
                        .HasForeignKey("CityID");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.UserSector", b =>
                {
                    b.HasOne("b8vB6mN3zAe.Models.Sector", "Sector")
                        .WithMany("UsersSectors")
                        .HasForeignKey("SectorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("b8vB6mN3zAe.Models.User", "User")
                        .WithMany("UsersSectors")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sector");

                    b.Navigation("User");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.ZipCode", b =>
                {
                    b.HasOne("b8vB6mN3zAe.Models.Enums.City", "City")
                        .WithMany("ZipCodes")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.Enums.City", b =>
                {
                    b.Navigation("Users");

                    b.Navigation("ZipCodes");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.Lab", b =>
                {
                    b.Navigation("Sectors");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.Sector", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("UsersSectors");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.User", b =>
                {
                    b.Navigation("UsersSectors");
                });
#pragma warning restore 612, 618
        }
    }
}
