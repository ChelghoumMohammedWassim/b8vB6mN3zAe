// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using b8vB6mN3zAe.Database;

#nullable disable

namespace b8vB6mN3zAe.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("b8vB6mN3zAe.Models.Analysis", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<decimal>("CActif")
                        .HasColumnType("numeric");

                    b.Property<string>("CN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Carbonates")
                        .HasColumnType("numeric");

                    b.Property<string>("Ce")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Clay")
                        .HasColumnType("numeric");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("ExchangeableCalcium")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ExchangeableCalciumPPM")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ExchangeableMagnesium")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ExchangeableMagnesiumPPM")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ExchangeablePotassium")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ExchangeableSodium")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ExchangeableSodiumPPM")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ExchangeablepotassiumPPM")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Nitrogen")
                        .HasColumnType("numeric");

                    b.Property<decimal>("OrganicMaterial")
                        .HasColumnType("numeric");

                    b.Property<string>("Ph")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Phosphorus")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PhosphorusOlsen")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PhosphorusOlsenPPM")
                        .HasColumnType("numeric");

                    b.Property<string>("SampleID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Sand")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Silt")
                        .HasColumnType("numeric");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Texture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("SampleID");

                    b.ToTable("Analysis");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.City", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SectorID")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("SectorID");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.Exploitation", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<decimal>("Diameter")
                        .HasColumnType("numeric");

                    b.Property<string>("LandID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Property")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("LandID");

                    b.ToTable("Exploitations");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.Farmer", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NCNA")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ZipCodeID")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("ZipCodeID");

                    b.ToTable("Farmers");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.Fertilizer", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<decimal>("Ammoniacal")
                        .HasColumnType("numeric");

                    b.Property<decimal>("CaO")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Cl")
                        .HasColumnType("numeric");

                    b.Property<int>("ConductivityMax")
                        .HasColumnType("integer");

                    b.Property<int>("Density")
                        .HasColumnType("integer");

                    b.Property<decimal>("Fe")
                        .HasColumnType("numeric");

                    b.Property<int>("FertilizerType")
                        .HasColumnType("integer");

                    b.Property<decimal>("K2O")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MgO")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Mn")
                        .HasColumnType("numeric");

                    b.Property<decimal>("N")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Nitric")
                        .HasColumnType("numeric");

                    b.Property<decimal>("P2O5")
                        .HasColumnType("numeric");

                    b.Property<int>("ReactionType")
                        .HasColumnType("integer");

                    b.Property<decimal>("S")
                        .HasColumnType("numeric");

                    b.Property<int>("Solubility")
                        .HasColumnType("integer");

                    b.Property<int>("SubType")
                        .HasColumnType("integer");

                    b.Property<decimal>("Ureic")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Zn")
                        .HasColumnType("numeric");

                    b.HasKey("ID");

                    b.ToTable("Fertilizers");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.Lab", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CityID")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.ToTable("Labs");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.Land", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FarmerID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Rainfall")
                        .HasColumnType("double precision");

                    b.HasKey("ID");

                    b.HasIndex("FarmerID");

                    b.ToTable("Lands");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.Plot", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("ExploitationID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Length")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Polygon")
                        .HasColumnType("integer");

                    b.Property<decimal>("Production")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Surface")
                        .HasColumnType("numeric");

                    b.Property<int>("TreeAge")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<decimal>("Width")
                        .HasColumnType("numeric");

                    b.HasKey("ID");

                    b.HasIndex("ExploitationID");

                    b.ToTable("Plots");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.Position", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlotId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal>("longitude")
                        .HasColumnType("numeric");

                    b.HasKey("ID");

                    b.HasIndex("PlotId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.Recommendation", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("AnalysisID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Goal")
                        .HasColumnType("integer");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("AnalysisID");

                    b.HasIndex("UserID");

                    b.ToTable("Recommendations");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.RecommendedFertilizer", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("FertilizerID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.Property<string>("RecommendationID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("FertilizerID");

                    b.HasIndex("RecommendationID");

                    b.ToTable("RecommendedFertilizers");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.Sample", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("LabID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlotID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SamplingDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("LabID");

                    b.HasIndex("PlotID");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.Sector", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LabID")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("LabID");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.User", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CityID")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.UserSector", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SectorID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("SectorID");

                    b.HasIndex("UserID");

                    b.ToTable("UserSector");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.ZipCode", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<int?>("CityID")
                        .HasColumnType("integer");

                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.ToTable("ZipCodes");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.Analysis", b =>
                {
                    b.HasOne("b8vB6mN3zAe.Models.Sample", "Sample")
                        .WithMany("Analyses")
                        .HasForeignKey("SampleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sample");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.City", b =>
                {
                    b.HasOne("b8vB6mN3zAe.Models.Sector", "Sector")
                        .WithMany("Cities")
                        .HasForeignKey("SectorID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.Exploitation", b =>
                {
                    b.HasOne("b8vB6mN3zAe.Models.Land", "Land")
                        .WithMany("Exploitations")
                        .HasForeignKey("LandID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Land");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.Farmer", b =>
                {
                    b.HasOne("b8vB6mN3zAe.Models.ZipCode", "ZipCode")
                        .WithMany("Farmers")
                        .HasForeignKey("ZipCodeID");

                    b.Navigation("ZipCode");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.Lab", b =>
                {
                    b.HasOne("b8vB6mN3zAe.Models.City", "City")
                        .WithMany("Labs")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.Land", b =>
                {
                    b.HasOne("b8vB6mN3zAe.Models.Farmer", "Farmer")
                        .WithMany("Lands")
                        .HasForeignKey("FarmerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farmer");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.Plot", b =>
                {
                    b.HasOne("b8vB6mN3zAe.Models.Exploitation", "Exploitation")
                        .WithMany("Plots")
                        .HasForeignKey("ExploitationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exploitation");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.Position", b =>
                {
                    b.HasOne("b8vB6mN3zAe.Models.Plot", "Plot")
                        .WithMany("Positions")
                        .HasForeignKey("PlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plot");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.Recommendation", b =>
                {
                    b.HasOne("b8vB6mN3zAe.Models.Analysis", "Analysis")
                        .WithMany("Recommendations")
                        .HasForeignKey("AnalysisID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("b8vB6mN3zAe.Models.User", "User")
                        .WithMany("Recommendations")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Analysis");

                    b.Navigation("User");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.RecommendedFertilizer", b =>
                {
                    b.HasOne("b8vB6mN3zAe.Models.Fertilizer", "Fertilizer")
                        .WithMany("RecommendedFertilizers")
                        .HasForeignKey("FertilizerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("b8vB6mN3zAe.Models.Recommendation", "Recommendation")
                        .WithMany("RecommendedFertilizers")
                        .HasForeignKey("RecommendationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fertilizer");

                    b.Navigation("Recommendation");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.Sample", b =>
                {
                    b.HasOne("b8vB6mN3zAe.Models.Lab", "Lab")
                        .WithMany("Samples")
                        .HasForeignKey("LabID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("b8vB6mN3zAe.Models.Plot", "Plot")
                        .WithMany("Samples")
                        .HasForeignKey("PlotID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lab");

                    b.Navigation("Plot");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.Sector", b =>
                {
                    b.HasOne("b8vB6mN3zAe.Models.Lab", "Lab")
                        .WithMany("Sectors")
                        .HasForeignKey("LabID");

                    b.Navigation("Lab");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.User", b =>
                {
                    b.HasOne("b8vB6mN3zAe.Models.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityID");

                    b.Navigation("City");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.UserSector", b =>
                {
                    b.HasOne("b8vB6mN3zAe.Models.Sector", "Sector")
                        .WithMany("UsersSectors")
                        .HasForeignKey("SectorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("b8vB6mN3zAe.Models.User", "User")
                        .WithMany("UsersSectors")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sector");

                    b.Navigation("User");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.ZipCode", b =>
                {
                    b.HasOne("b8vB6mN3zAe.Models.City", "City")
                        .WithMany("ZipCodes")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("City");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.Analysis", b =>
                {
                    b.Navigation("Recommendations");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.City", b =>
                {
                    b.Navigation("Labs");

                    b.Navigation("Users");

                    b.Navigation("ZipCodes");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.Exploitation", b =>
                {
                    b.Navigation("Plots");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.Farmer", b =>
                {
                    b.Navigation("Lands");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.Fertilizer", b =>
                {
                    b.Navigation("RecommendedFertilizers");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.Lab", b =>
                {
                    b.Navigation("Samples");

                    b.Navigation("Sectors");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.Land", b =>
                {
                    b.Navigation("Exploitations");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.Plot", b =>
                {
                    b.Navigation("Positions");

                    b.Navigation("Samples");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.Recommendation", b =>
                {
                    b.Navigation("RecommendedFertilizers");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.Sample", b =>
                {
                    b.Navigation("Analyses");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.Sector", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("UsersSectors");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.User", b =>
                {
                    b.Navigation("Recommendations");

                    b.Navigation("UsersSectors");
                });

            modelBuilder.Entity("b8vB6mN3zAe.Models.ZipCode", b =>
                {
                    b.Navigation("Farmers");
                });
#pragma warning restore 612, 618
        }
    }
}
