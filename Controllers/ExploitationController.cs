using b8vB6mN3zAe.Database;
using b8vB6mN3zAe.Dtos;
using b8vB6mN3zAe.Mappers;
using b8vB6mN3zAe.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace b8vB6mN3zAe.Controllers
{
    [Route("exploitation")]
    [ApiController]
    public class ExploitationController : ControllerBase
    {

        private readonly ApplicationDBContext _context;

        public ExploitationController(ApplicationDBContext context)
        {
            _context = context;
        }


        [HttpGet]
        [Route("all")]
        [Authorize]
        public async Task<IActionResult> GetExploitations()
        {
            try
            {
                var exploitations = await _context.Exploitations.
                Include(exploitations => exploitations.Land).
                ThenInclude(land => land.Farmer).
                Include(exploitations => exploitations.Plots).
                ThenInclude(plot=> plot.Positions)
                .Select(exploitations => exploitations.ToExploitationResponseDto())
                .ToListAsync();

                return Ok(exploitations);

            }
            catch (Exception)
            {
                return StatusCode(500, "Internal Server error.");
            }
        }

        [HttpGet]
        [Route("id")]
        [Authorize]
        public async Task<IActionResult> GetExploitationByID([FromHeader] String id)
        {
            try
            {
                var exploitations = await _context.Exploitations.
                Include(exploitations => exploitations.Land).
                ThenInclude(land => land.Farmer).
                Include(exploitations => exploitations.Plots).
                ThenInclude(plot=> plot.Positions).
                FirstOrDefaultAsync(exploitations => exploitations!.ID == id);

                if (exploitations is null)
                {
                    return NotFound("Exploitation Not found.");
                }

                return Ok(exploitations.ToExploitationResponseDto());

            }
            catch (Exception)
            {
                return StatusCode(500, "Internal Server error.");
            }
        }



        [HttpPost]
        [Authorize]
        public async Task<IActionResult> CreateLand(CreateExploitationRequest exploitationRequest)
        {
            try
            {
                if (!ModelState.IsValid)
                {
                    return BadRequest("Invalid request structure.");
                }
                //check request farmer if exist 
                var dbLand = await _context.Lands.FindAsync(exploitationRequest.LandID);
                if (dbLand is null)
                {
                    return NotFound("Selected Land not found.");
                }

                // Check if a land with the same name already exists
                var dbExploitation = await _context.Exploitations
                    .FirstOrDefaultAsync(exploitation => exploitation.Property == exploitationRequest.Property);


                Exploitation newExploitation = exploitationRequest.FromCreateExploitationRequestDto();
                //add land to db
                await _context.Exploitations.AddAsync(newExploitation);

                await _context.SaveChangesAsync();

                return Created();

            }
            catch (Exception)
            {
                return StatusCode(500, "Internal server error.");
            }
        }


        [HttpPut]
        [Authorize]
        public async Task<IActionResult> UpdateExploitation(UpdateExploitationRequest exploitationRequest)
        {
            try
            {
                if (!ModelState.IsValid)
                {
                    return BadRequest("Invalid request structure.");
                }

                var dbExploitation = await _context.Exploitations.FirstOrDefaultAsync(exploitation=> exploitation.ID == exploitationRequest.ID);
                if  (dbExploitation is null)
                {
                    return NotFound("Exploitation Not Found.");
                }

                //check request exploitation if exist 
                var dbLand = await _context.Lands.FindAsync(exploitationRequest.LandID);
                if (dbLand is null)
                {
                    return NotFound("Selected Land not found.");
                }


                //update the land
                dbExploitation.Property = exploitationRequest.Property;
                dbExploitation.Type = exploitationRequest.Type;
                dbExploitation.Diameter = exploitationRequest.Diameter;
                dbExploitation.LandID = exploitationRequest.LandID;

    
                await _context.SaveChangesAsync();

                return Ok("Exploitation Updated.");

            }
            catch (Exception)
            {
                return StatusCode(500, "Internal server error.");
            }
        }

    }


}